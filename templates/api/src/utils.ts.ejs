import { Request, RequestHandler } from "express";
import { validationResult } from "express-validator";
import { ObjectId } from "mongodb";

/**
 * Checks the req object for inserted validation errors. If any are found,
 * the request is halted and a 400 is returned with the list of errors found
 */
export const validateRequest: RequestHandler = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty())
    return res.status(400).json({ message: errors.array()[0].msg });
  return next();
};

/* A middleware which simulates network lag in development mode */
export const simulateNetworkLag: RequestHandler = (req, res, next) => {
  const MAX_LAG = 0;
  if (process.env.NODE_ENV !== "development" || MAX_LAG === 0) return next();
  setTimeout(next, Math.random() * MAX_LAG);
};

/* Creates a middleware which extends the request timeout by the specified time */
export const extendTimeout =
  (seconds: number): RequestHandler =>
  (req, res, next) => {
    req.setTimeout(seconds * 1000);
    return next();
  };

/* Converts a string to an ObjectId  */
export const toObjectId = (id: string): ObjectId =>
  ObjectId.createFromHexString(id);

/* Creates a regex search string */
export const toRegex = (key: string) => new RegExp(`.*${key || ""}.*`, "i");

/* An interface which extends Express' Request to add more data */
export interface AuthorizedRequest extends Request {
  params: any;
  query: any;
}

/* Typescript type to make all object fields non-readonly */
export type Mutable<T> = {
  -readonly [k in keyof T]: T[k];
};

/**
 * Represents a custom upload object with key and location.
 * This mimics the AWS S3 with the key and location properties,
 * making it easier to switch to S3 in the future if need be
 */
export interface CustomFileUpload extends Express.Multer.File {
  key: string;
  location: string;
}
