/* eslint-disable @typescript-eslint/no-var-requires */
import * as path from "path";
import * as http from "http";
import * as _debug from "debug";
import * as morgan from "morgan";
import * as express from "express";
import { NextFunction, Request, Response } from "express";
import * as cookieParser from "cookie-parser";
import { MongoClient } from "mongodb";
import { configureRoutes } from "./routes";
import { configureInit } from "./init";
import * as cors from "cors";

const helmet = require("helmet");

(async () => {
  const app = express();
  const debug = _debug("<%= appName %>");
  const isDev = process.env.NODE_ENV === "development";

  // =====================SETUP MIDDLEWARES===========================
  if (!isDev) app.set("trust proxy", 1);

  app.use(morgan("dev"));
  app.use(express.json());
  app.use(express.urlencoded({ extended: false }));
  app.use(cookieParser());
  app.use("/uploads", express.static(path.join(__dirname, "../uploads")));

  // ====================SETUP MONGODB/MONGOOSE==========================
  global.mongoClient = new MongoClient(process.env.MONGODB_URL);
  await global.mongoClient.connect();
  // ===================================================================

  // =====================SETUP SECURITY==============================
  app.use(helmet());

  app.use(
    cors({
      origin: [
        /* TODO: Whitelist frontend URLs */
        process.env.WEB_BASE_URL
      ],
      exposedHeaders: ["X-Auth-Token"],
      credentials: true
    })
  );
  // =================================================================

  // =======================STARTUP SCRIPTS===========================
  await configureInit();
  configureRoutes(app);
  // =================================================================

  // =====================ERROR HANDLERS==============================
  // General error handler
  // eslint-disable-next-line no-unused-vars
  app.use((err: any, req: Request, res: Response, next: NextFunction) => {
    console.error(err);
    return res.status(err.status || 404).send(err.message);
  });
  // =================================================================

  // =====================SETUP SERVER================================
  const normalizePort = (val: string): boolean | string | number => {
    const port = parseInt(val, 10);

    // named pipe
    if (isNaN(port)) return val;

    // port number
    if (port >= 0) return port;

    return false;
  };

  /* Event listener for HTTP server "error" event */
  const onError = (error: any): void => {
    if (error.syscall !== "listen") throw error;

    const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case "EACCES":
        console.error(bind + " requires elevated privileges");
        process.exit(1);
        break;
      case "EADDRINUSE":
        console.error(bind + " is already in use");
        process.exit(1);
        break;
      default:
        throw error;
    }
  };

  /* Event listener for HTTP server "listening" event */
  const onListening = () => {
    const addr = server.address();
    const bind =
      typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    if (isDev) console.log("Listening on " + bind);
    debug("Listening on " + bind);
  };

  const port = normalizePort(process.env.PORT || "3000");
  app.set("port", port);

  const server = http.createServer(app);
  server.on("error", onError);
  server.on("listening", onListening);
  server.listen(port);

  // =================================================================
})();
