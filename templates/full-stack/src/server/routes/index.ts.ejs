import validator from "validator";
import { Express } from "express";

export const configureRoutes = (app: Express): void => {
    // Apply nested sanitization to request parameters
    app.use((req, res, next) => {
        const sanitize = (value: any): any => {
            if (Object.prototype.toString.call(value) === "[object Object]") {
                for (const k of Object.keys(value)) value[k] = sanitize(value[k]);
            } else if (Object.prototype.toString.call(value) === "[object Array]") {
                for (let i = 0; i < value.length; i++) value[i] = sanitize(value[i]);
            } else if (Object.prototype.toString.call(value) === "[object String]") {
                value = validator.escape(validator.trim(value));
            }

            return value;
        };

        for (const k of Object.keys(req.params)) req.params[k] = sanitize(req.params[k]);
        for (const k of Object.keys(req.query)) req.query[k] = sanitize(req.query[k]);
        for (const k of Object.keys(req.body)) req.body[k] = sanitize(req.body[k]);
        return next();
    });

    // Decode query parameters, resolving hex-encoded apostrophe also
    app.use((req, res, next) => {
        for (const key in req.query) {
            if (Object.hasOwnProperty.call(req.query, key)) {
                req.query[key] = decodeURIComponent(req.query[key] as string)
                    .replace("&#x27;/gi", "'")
                    .replace(/&#x2F;/gi, "/");
            }
        }
        next();
    });

    app.get(["/", "/*"], (req, res) => {
        return res.render("public");
    });
};
